package com.superphoto.utils

import android.content.Context
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import com.superphoto.config.APIConfig

/**
 * Helper class for API status and configuration guidance
 */
object APIStatusHelper {
    
    /**
     * Check API configuration and show appropriate message
     */
    fun checkAndShowAPIStatus(context: Context): Boolean {
        return if (APIConfig.isConfigured()) {
            showAPIReadyMessage(context)
            true
        } else {
            showAPIConfigurationDialog(context)
            false
        }
    }
    
    /**
     * Show API ready message with rate limit info
     */
    private fun showAPIReadyMessage(context: Context) {
        val remainingRequests = RateLimitManager.getRemainingRequests()
        val message = "‚úÖ Gemini API s·∫µn s√†ng!\n" +
                "üîÑ C√≤n l·∫°i: $remainingRequests requests\n" +
                "‚è±Ô∏è Free tier: ${APIConfig.FREE_TIER_FLASH_RPM} requests/ph√∫t"
        
        Toast.makeText(context, message, Toast.LENGTH_LONG).show()
    }
    
    /**
     * Show API configuration dialog with instructions
     */
    private fun showAPIConfigurationDialog(context: Context) {
        AlertDialog.Builder(context)
            .setTitle("üîë C·∫•u h√¨nh Gemini API")
            .setMessage(getConfigurationInstructions())
            .setPositiveButton("Hi·ªÉu r·ªìi") { dialog, _ ->
                dialog.dismiss()
            }
            .setNegativeButton("H∆∞·ªõng d·∫´n chi ti·∫øt") { dialog, _ ->
                showDetailedInstructions(context)
                dialog.dismiss()
            }
            .setCancelable(false)
            .show()
    }
    
    /**
     * Show detailed configuration instructions
     */
    private fun showDetailedInstructions(context: Context) {
        AlertDialog.Builder(context)
            .setTitle("üìã H∆∞·ªõng d·∫´n chi ti·∫øt")
            .setMessage(getDetailedInstructions())
            .setPositiveButton("OK") { dialog, _ ->
                dialog.dismiss()
            }
            .show()
    }
    
    /**
     * Get basic configuration instructions
     */
    private fun getConfigurationInstructions(): String {
        return """
            üöÄ ƒê·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng AI, b·∫°n c·∫ßn:
            
            1Ô∏è‚É£ Truy c·∫≠p: https://aistudio.google.com/
            2Ô∏è‚É£ ƒêƒÉng nh·∫≠p v·ªõi Google
            3Ô∏è‚É£ Nh·∫•n "Get API Key"
            4Ô∏è‚É£ T·∫°o API key mi·ªÖn ph√≠
            5Ô∏è‚É£ Thay th·∫ø trong APIConfig.kt
            
            üí° Ho√†n to√†n MI·ªÑN PH√ç!
            ‚ö° 15 requests/ph√∫t v·ªõi Gemini 2.5 Flash
        """.trimIndent()
    }
    
    /**
     * Get detailed configuration instructions
     */
    private fun getDetailedInstructions(): String {
        return """
            üìù Chi ti·∫øt c·∫•u h√¨nh:
            
            üîß File: APIConfig.kt
            üìç D√≤ng: const val GEMINI_API_KEY = "..."
            
            üîÑ Thay th·∫ø:
            "YOUR_GEMINI_API_KEY_HERE"
            ‚Üì
            "your_actual_api_key_here"
            
            ‚úÖ Sau khi c·∫•u h√¨nh:
            ‚Ä¢ Kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng
            ‚Ä¢ T·∫•t c·∫£ t√≠nh nƒÉng AI s·∫Ω ho·∫°t ƒë·ªông
            ‚Ä¢ Style Transfer, Face Swap, AI Enhance...
            
            üéØ Free Tier Limits:
            ‚Ä¢ Gemini 2.5 Flash: 15 RPM
            ‚Ä¢ Gemini 2.5 Pro: 5 RPM
            ‚Ä¢ Kh√¥ng c·∫ßn th·∫ª t√≠n d·ª•ng
        """.trimIndent()
    }
    
    /**
     * Show rate limit status
     */
    fun showRateLimitStatus(context: Context) {
        val remainingRequests = RateLimitManager.getRemainingRequests()
        val timeUntilReset = RateLimitManager.getTimeUntilReset()
        
        val message = if (remainingRequests > 0) {
            "‚úÖ C√≤n l·∫°i: $remainingRequests requests\n" +
            "‚è±Ô∏è Reset sau: ${timeUntilReset / 1000}s"
        } else {
            "‚è≥ ƒê√£ h·∫øt quota\n" +
            "üîÑ Reset sau: ${timeUntilReset / 1000}s"
        }
        
        Toast.makeText(context, message, Toast.LENGTH_SHORT).show()
    }
    
    /**
     * Check if can make request and show appropriate message
     */
    fun checkCanMakeRequest(context: Context): Boolean {
        return if (!APIConfig.isConfigured()) {
            showAPIConfigurationDialog(context)
            false
        } else if (!RateLimitManager.canMakeRequest()) {
            showRateLimitStatus(context)
            false
        } else {
            true
        }
    }
}